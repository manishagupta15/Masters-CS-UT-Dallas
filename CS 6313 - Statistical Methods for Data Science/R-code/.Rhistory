boxplot(voltage.remote,voltage.local,
range=1.5,main="Voltages at Remote  and local locations",
ylab="Voltage", xlim=c(8,11),ylim=c(0,20),names = c("Remote", "Local"))
# Histograms
par(mfrow=c(1,2))
hist(voltage.remote,main="remote locations",
ylab="Number of locations",xlab="Voltage",breaks=6)
hist(voltage.local,main="local locations",
xlab="Voltage",ylab="number of locations", breaks=seq(8,11,by=0.5))
#########################
# R Code for Question 2(A)
#########################
# import sql library
library(sqldf)
# Reading the vapor.csv file
data <- read.csv.sql(file="/users/psprao/downloads/stats/datasets/voltage.csv")
# Getting the theoretical and experimental values
voltage.remote<-sqldf("select * from data where location=0")[,2]
voltage.local<-sqldf("select * from data where location=1")[,2]
#Boxplot
par(mfrow=c(1,1))
boxplot(voltage.remote,voltage.local,
range=1.5,main="Voltages at Remote  and local locations",
ylab="Voltage", xlim=c(8,11),ylim=c(0,20),names = c("Remote", "Local"))
# Histograms
par(mfrow=c(1,2))
hist(voltage.remote,main="remote locations",
ylab="Number of locations",xlab="Voltage",breaks=seq(8,11,by=0.5))
hist(voltage.local,main="local locations",
xlab="Voltage",ylab="number of locations", breaks=seq(8,11,by=0.5))
#########################
# R Code for Question 3
#######################
# importing SQL library
library(sqldf)
# Reading the vapor.csv file
data <- read.csv.sql(file="/users/psprao/downloads/stats/datasets/vapor.csv")
# Getting the theoretical and experimental values
vapor.theoretical<-data[,2]
vapor.experimental<-data[,3]
#Boxplot
par(mfrow=c(1,1))
boxplot(vapor.theoretical,vapor.experimental,
range=1.5,main="Vapor Pressure of dibenzothiophene",
ylab="Pressure", names = c("Theoretical", "Experimental"))
# Histograms
par(mfrow=c(1,2))
hist(vapor.theoretical,main="remote locations",
ylab="Number of locations",xlab="Voltage",breaks=seq(8,11,by=0.5))
hist(vapor.experimental,main="local locations",
xlab="Voltage",ylab="number of locations", breaks=seq(8,11,by=0.5))
# Getting sample statistics
x.mean=mean(vapor.theoretical)
x.var=var(vapor.theoretical)
n=NROW(vapor.theoretical)
m=NROW(vapor.experimental)
y.mean=mean(vapor.experimental)
y.var=var(vapor.experimental)
# Estimator for the difference in means
mean.diff.estimator<-x.mean - y.mean
# > mean.diff.estimator
# [1] 0.0006875
# Pooled variance
pooled.var<-((n-1)*x.var+(m-1)*y.var)/(n+m-2)
# Getting a 95% CI for difference in means
mean.diff.ci<- mean.diff.estimator+c(-1,1)*qt(1-(1-0.95)/2,n+m-2)*sqrt(pooled.var/m+pooled.var/n)
# print mean.diff.ci
print(mean.diff.ci)
# [1] -0.2915711  0.2929461
#########################
# R Code for Question 3
#######################
# importing SQL library
library(sqldf)
# Reading the vapor.csv file
data <- read.csv.sql(file="/users/psprao/downloads/stats/datasets/vapor.csv")
# Getting the theoretical and experimental values
vapor.theoretical<-data[,2]
vapor.experimental<-data[,3]
# Histograms
par(mfrow=c(1,2))
hist(vapor.theoretical,main="remote locations",
ylab="Number of locations",xlab="Voltage",breaks=seq(8,11,by=0.5))
hist(vapor.experimental,main="local locations",
xlab="Voltage",ylab="number of locations", breaks=seq(8,11,by=0.5))
# Getting sample statistics
x.mean=mean(vapor.theoretical)
x.var=var(vapor.theoretical)
n=NROW(vapor.theoretical)
m=NROW(vapor.experimental)
y.mean=mean(vapor.experimental)
y.var=var(vapor.experimental)
# Estimator for the difference in means
mean.diff.estimator<-x.mean - y.mean
# > mean.diff.estimator
# [1] 0.0006875
# Pooled variance
pooled.var<-((n-1)*x.var+(m-1)*y.var)/(n+m-2)
# Getting a 95% CI for difference in means
mean.diff.ci<- mean.diff.estimator+c(-1,1)*qt(1-(1-0.95)/2,n+m-2)*sqrt(pooled.var/m+pooled.var/n)
# print mean.diff.ci
print(mean.diff.ci)
# [1] -0.2915711  0.2929461
#########################
# R Code for Question 3
#######################
# importing SQL library
library(sqldf)
# Reading the vapor.csv file
data <- read.csv.sql(file="/users/psprao/downloads/stats/datasets/vapor.csv")
# Getting the theoretical and experimental values
vapor.theoretical<-data[,2]
vapor.experimental<-data[,3]
# Histograms
par(mfrow=c(1,2))
hist(vapor.theoretical,main="remote locations",
ylab="Number of locations",xlab="Voltage",breaks=seq(8,11,by=0.5))
hist(vapor.experimental,main="local locations",
xlab="Voltage",ylab="number of locations", breaks=seq(8,11,by=0.5))
# Getting sample statistics
x.mean=mean(vapor.theoretical)
x.var=var(vapor.theoretical)
n=NROW(vapor.theoretical)
m=NROW(vapor.experimental)
y.mean=mean(vapor.experimental)
y.var=var(vapor.experimental)
# Estimator for the difference in means
mean.diff.estimator<-x.mean - y.mean
# > mean.diff.estimator
# [1] 0.0006875
# Pooled variance
pooled.var<-((n-1)*x.var+(m-1)*y.var)/(n+m-2)
# Getting a 95% CI for difference in means
mean.diff.ci<- mean.diff.estimator+c(-1,1)*qt(1-(1-0.95)/2,n+m-2)*sqrt(pooled.var/m+pooled.var/n)
# print mean.diff.ci
print(mean.diff.ci)
# [1] -0.2915711  0.2929461
#########################
# R Code for Question 3
#######################
# importing SQL library
library(sqldf)
# Reading the vapor.csv file
data <- read.csv.sql(file="/users/psprao/downloads/stats/datasets/vapor.csv")
# Getting the theoretical and experimental values
vapor.theoretical<-data[,2]
vapor.experimental<-data[,3]
#Boxplot
par(mfrow=c(1,1))
boxplot(vapor.theoretical,vapor.experimental,
range=1.5,main="Vapor Pressure of dibenzothiophene",
ylab="Pressure", names = c("Theoretical", "Experimental"))
# Histograms
par(mfrow=c(1,2))
hist(vapor.theoretical,main="remote locations",
ylab="Number of locations",xlab="Voltage"))
hist(vapor.experimental,main="local locations",
xlab="Voltage",ylab="number of locations" )
# Getting sample statistics
x.mean=mean(vapor.theoretical)
x.var=var(vapor.theoretical)
n=NROW(vapor.theoretical)
m=NROW(vapor.experimental)
y.mean=mean(vapor.experimental)
y.var=var(vapor.experimental)
# Estimator for the difference in means
mean.diff.estimator<-x.mean - y.mean
# > mean.diff.estimator
# [1] 0.0006875
# Pooled variance
pooled.var<-((n-1)*x.var+(m-1)*y.var)/(n+m-2)
# Getting a 95% CI for difference in means
mean.diff.ci<- mean.diff.estimator+c(-1,1)*qt(1-(1-0.95)/2,n+m-2)*sqrt(pooled.var/m+pooled.var/n)
# print mean.diff.ci
print(mean.diff.ci)
# [1] -0.2915711  0.2929461
#########################
# R Code for Question 3
#######################
# importing SQL library
library(sqldf)
# Reading the vapor.csv file
data <- read.csv.sql(file="/users/psprao/downloads/stats/datasets/vapor.csv")
# Getting the theoretical and experimental values
vapor.theoretical<-data[,2]
vapor.experimental<-data[,3]
#Boxplot
par(mfrow=c(1,1))
boxplot(vapor.theoretical,vapor.experimental,
range=1.5,main="Vapor Pressure of dibenzothiophene",
ylab="Pressure", names = c("Theoretical", "Experimental"))
# Histograms
par(mfrow=c(1,2))
hist(vapor.theoretical,main="theoretical",
ylab="Number",xlab="Pressure")
hist(vapor.experimental,main="experimental",
xlab="Pressure",ylab="Number" )
# Getting sample statistics
x.mean=mean(vapor.theoretical)
x.var=var(vapor.theoretical)
n=NROW(vapor.theoretical)
m=NROW(vapor.experimental)
y.mean=mean(vapor.experimental)
y.var=var(vapor.experimental)
# Estimator for the difference in means
mean.diff.estimator<-x.mean - y.mean
# > mean.diff.estimator
# [1] 0.0006875
# Pooled variance
pooled.var<-((n-1)*x.var+(m-1)*y.var)/(n+m-2)
# Getting a 95% CI for difference in means
mean.diff.ci<- mean.diff.estimator+c(-1,1)*qt(1-(1-0.95)/2,n+m-2)*sqrt(pooled.var/m+pooled.var/n)
# print mean.diff.ci
print(mean.diff.ci)
# [1] -0.2915711  0.2929461
#########################
# R Code for Question 3
#######################
# importing SQL library
library(sqldf)
# Reading the vapor.csv file
data <- read.csv.sql(file="/users/psprao/downloads/stats/datasets/vapor.csv")
# Getting the theoretical and experimental values
vapor.theoretical<-data[,2]
vapor.experimental<-data[,3]
#Boxplot
par(mfrow=c(1,1))
boxplot(vapor.theoretical,vapor.experimental,
range=1.5,main="Vapor Pressure of dibenzothiophene",
ylab="Pressure", names = c("Theoretical", "Experimental"))
# Histograms
par(mfrow=c(1,2))
hist(vapor.theoretical,main="theoretical",
ylab="Number",xlab="Pressure")
hist(vapor.experimental,main="experimental",
xlab="Pressure",ylab="Number" )
# Getting sample statistics
x.mean=mean(vapor.theoretical)
x.var=var(vapor.theoretical)
n=NROW(vapor.theoretical)
m=NROW(vapor.experimental)
y.mean=mean(vapor.experimental)
y.var=var(vapor.experimental)
# Estimator for the difference in means
mean.diff.estimator<-x.mean - y.mean
# > mean.diff.estimator
# [1] 0.0006875
# Pooled variance
pooled.var<-((n-1)*x.var+(m-1)*y.var)/(n+m-2)
# Getting a 95% CI for difference in means
mean.diff.ci<- mean.diff.estimator+c(-1,1)*qt(1-(1-0.95)/2,n+m-2)*sqrt(pooled.var/m+pooled.var/n)
# print mean.diff.ci
print(mean.diff.ci)
# [1] -0.2915711  0.2929461
#########################
# R Code for Question 1
########################
# importing 'boot' library
library(boot)
#Reading the gpa.csv file
data <- read.csv.sql(file="/users/psprao/downloads/stats/datasets/gpa.csv")
# Getting the GPA and ACT score data
gpa<-data[,1]
act.scores<-data[,2]
# Boxplot
par(mfrow=c(1,1))
boxplot(gpa,act.scores,range=1.5,main="Student scores",
ylab="Score", names = c("GPA", "ACT Scores"))
# Scatterplot of gps vs act score
plot(gpa,act.scores,xlab="gpa",ylab="ACT score",main="Scatterplot: GPA vs ACT scores")
abline(lm(act.scores~gpa))
n=NROW(gpa)
# Estimator for pop. correlation
corr.estimator<-cor(gpa,act.scores)
# bootstrap sampling function
corr.npar<-function(x,i)
{
x2=x[i,]
result<-cor(x2$gpa,x2$act)
return (result)
}
# Bootstrap estimation
corr.npar.boot<-boot(data,corr.npar,sim="ordinary",R=1000)
print(corr.npar.boot)
# ORDINARY NONPARAMETRIC BOOTSTRAP
# Call:
#  boot(data = data, statistic = corr.npar, R = 1000, sim = "ordinary")
# Bootstrap Statistics  :
#  original      bias    std. error
#t1* 0.2694818 0.001159284   0.1071447
# > cor(gpa,act.scores)
# [1] 0.2694818
# > corr.npar.boot$t0
# [1] 0.2694818
# > mean(corr.npar.boot$t)-corr.npar.boot$t0
# [1] -1.650308e-05
# > sd(corr.npar.boot$t)
# [1] 0.104966
# plotting the bootstrap distribution of the correlation estimator
plot(corr.npar.boot)
# Confidence interval for population correlation
boot.ci(corr.npar.boot,conf=0.95)
###########################################################
#R Code for problem 1
###########################################################
# Problem 1 (b)
# part (i) : Simulate a draw of Xa, Xb and T
simulatedraw <- function(){
# Simulate a draw of Xa using the function Xa = -10 ln (1-U)
#Xa = (-10) * 2.303 * log10(1 - runif(1))
# Print the value of the draw
print(Xa)
# Simulate a draw of Xb using the function Xb = -10ln(1-U)
Xb = (-10) * 2.303 * log10(1 - runif(1))
# Print the value of the draw
print(Xb)
# Simulate the draw of T using the above values of Xa and Xb
print(Xa+Xb)
}
# > simulatedraw()
## [1] 3.821385
## [1] 17.6624
## [1] 21.48379
# Part (ii) Replicate the draw in part (a) for 10,000 times and
#store the results
getdraw <- function(n){
# Store the values of T in the variable t
t <- replicate(n, (-10) * (2.303) * log10(1 - runif(1)) +
(2.303) * log10(1 - runif(1)) * (-10))
return (t)
}
#  > getdraw(10000)
## [1] 10.0029291 13.0884744 20.1432919  7.9062688 13.7474493
## [6]  3.2303715  3.1979952 14.0537767 36.2692867 14.9240531
## [11] 63.3234714 16.0721903 20.3507367  0.8239364 27.7695047
## [16] 45.9597216 18.7721382  9.4141846 10.4780209 49.1960118
## [21]  2.3129311 14.7745887 12.8468813 25.9557017 14.9179431
...
...
...
# Part (iii) : Draw a histogram and a add curve for the exponential
density function
# We call the following commands:
> t = getdraw(10000)
> hist(t, probability = TRUE, col = gray(.9), main = "Satellite Lifetime")
> curve( dexp(x,0.1), add = T )
###########################################################
#R Code for problem 1
###########################################################
# Problem 1 (b)
# part (i) : Simulate a draw of Xa, Xb and T
simulatedraw <- function(){
# Simulate a draw of Xa using the function Xa = -10 ln (1-U)
#Xa = (-10) * 2.303 * log10(1 - runif(1))
# Print the value of the draw
print(Xa)
# Simulate a draw of Xb using the function Xb = -10ln(1-U)
Xb = (-10) * 2.303 * log10(1 - runif(1))
# Print the value of the draw
print(Xb)
# Simulate the draw of T using the above values of Xa and Xb
print(Xa+Xb)
}
# > simulatedraw()
## [1] 3.821385
## [1] 17.6624
## [1] 21.48379
# Part (ii) Replicate the draw in part (a) for 10,000 times and
#store the results
getdraw <- function(n){
# Store the values of T in the variable t
t <- replicate(n, (-10) * (2.303) * log10(1 - runif(1)) +
(2.303) * log10(1 - runif(1)) * (-10))
return (t)
}
#  > getdraw(10000)
## [1] 10.0029291 13.0884744 20.1432919  7.9062688 13.7474493
## [6]  3.2303715  3.1979952 14.0537767 36.2692867 14.9240531
## [11] 63.3234714 16.0721903 20.3507367  0.8239364 27.7695047
## [16] 45.9597216 18.7721382  9.4141846 10.4780209 49.1960118
## [21]  2.3129311 14.7745887 12.8468813 25.9557017 14.9179431
...
...
...
# Part (iii) : Draw a histogram and a add curve for the exponential
# density function
# We call the following commands:
t = getdraw(10000)
hist(t, probability = TRUE, col = gray(.9), main = "Satellite Lifetime")
curve( dexp(x,0.1), add = T )
getdraw(10000)
###########################################################
#R Code for problem 1
###########################################################
# Problem 1 (b)
# part (i) : Simulate a draw of Xa, Xb and T
simulatedraw <- function(){
# Simulate a draw of Xa using the function Xa = -10 ln (1-U)
#Xa = (-10) * 2.303 * log10(1 - runif(1))
# Print the value of the draw
print(Xa)
# Simulate a draw of Xb using the function Xb = -10ln(1-U)
Xb = (-10) * 2.303 * log10(1 - runif(1))
# Print the value of the draw
print(Xb)
# Simulate the draw of T using the above values of Xa and Xb
print(Xa+Xb)
}
# > simulatedraw()
# [1] 3.821385
# [1] 17.6624
# [1] 21.48379
# Part (ii) Replicate the draw in part (a) for 10,000 times and
#store the results
getdraw <- function(n){
# Store the values of T in the variable t
t <- replicate(n, (-10) * (2.303) * log10(1 - runif(1)) +
(2.303) * log10(1 - runif(1)) * (-10))
return (t)
}
# > getdraw(10000)
# [1] 10.0029291 13.0884744 20.1432919  7.9062688 13.7474493
# [6]  3.2303715  3.1979952 14.0537767 36.2692867 14.9240531
# [11] 63.3234714 16.0721903 20.3507367  0.8239364 27.7695047
# [16] 45.9597216 18.7721382  9.4141846 10.4780209 49.1960118
# [21]  2.3129311 14.7745887 12.8468813 25.9557017 14.9179431
...
...
...
# Part (iii) : Draw a histogram and a add curve for the exponential
# density function
# We call the following commands:
t = getdraw(10000)
hist(t, probability = TRUE, col = gray(.9), main = "Satellite Lifetime")
curve( dexp(x,0.1), add = T )
# Part (iv) : Estimate the value of E(T)
# > m = getdraw(10000)
# > mean(m)
# [1] 19.99373
# Part (v) : Estimate the probability that the lifetime of the
# satellite exceeds 15 years i.e. P(T>15)
# > m = getdraw(10000)
# > sum(m>15)/10000
# [1] 0.5532
# Part (vi): Simulating 10,000 draws for 4 times
# We add another paramter k to our getdraw(n) function
# and write a new function getdraw (n, k)
getdraws <- function(n,k){
# Getting n draws for k times
t <- replicate(k, (-10) * (2.303) * log10(1 - runif(n)) +
(2.303) * log10(1 - runif(n)) * (-10))
# Finding the mean value in each column of the result
m <- apply(t,2,mean)
# Finding the probability of T>15 in each column of the result
p  <- apply(t,2,function(x) sum(x>15)/sum(x>=0))
# Combining the mean and probability results
result <- cbind(m,p)
# Naming the columns
colnames(result) <- c("E(T)","P(T>15)")
return (result)
}
# We simply call getdraw(10000,4):
# > getdraw(10000,4)
#       E(T)   P(T>15)
# [1,] 20.18618  0.5636
# [2,] 20.10753  0.5632
# [3,] 20.00512  0.5580
# [4,] 19.95078  0.5566
# Problem 1, Part (c) : Monte Carlo replications for k=5 times using
# n=1000 and	n=100000, where n is the number of draws taken
# > getdraw (1000, 5)
#       E(T)  	 P(T>15)
# [1,] 19.29913   0.541
# [2,] 20.48910   0.568
# [3,] 19.83506   0.548
# [4,] 19.79278   0.557
# [5,] 20.22468   0.543
# > getdraw (100000, 5)
#       E(T)   	P(T>15)
# [1,] 20.10833 0.56098
# [2,] 19.95363 0.55437
# [3,] 19.97778 0.55673
# [4,] 20.02585 0.55765
# [5,] 19.96851 0.55651
m = getdraw(10000)
mean(m)
m = getdraw(10000)
sum(m>15)/10000
getdraw(10000,4)
getdraws(10000,4)
getdraws(1000,5)
###########################################################
# R Code for problem 2
###########################################################
# Compute the approximate value of pi using Monte Carlo Simulations
# We write a function approxpi(), which uses the
# concept of a circle of radius 0.5 with centre at (0.5,0.5)
# circumscribed in a square of unit length with vertices at
# (0,0), (0,1), (1,0) and (1,1).
approxpi <- function(){
# Generate 10,000 draws for x-coordinate of point inside unit square
x = runif(10000)
# Generate 10,000 draws for y-coordinate of point inside unit square
y = runif(10000)
#Computing distance of the point from the centre (0.5, 0.5)
x = sqrt((x-0.5)^2 + (y-0.5)^2)
# Finding the number of points which fall inside the circle
sum(x<=0.5)/10000*4
}
# > approxpi()
# [1] 3.1404
approxpi()
